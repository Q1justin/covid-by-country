{"version":3,"sources":["components/TotalStats/StatBox/StatBox.js","components/TotalStats/TotalStats.js","components/SearchBox/SearchBox.js","components/BarGraph/BarGraph.js","App.js","reportWebVitals.js","index.js","components/TotalStats/StatBox/Statbox.module.css","components/TotalStats/TotalStats.module.css","components/SearchBox/SearchBox.module.css","components/BarGraph/BarGraph.module.css"],"names":["StatBox","props","className","classes","box","category","displayData","TotalStats","data","showData","layoutColumn","covidData","confirmed","toString","replace","deaths","critical","recovered","SearchBox","search","Autocomplete","id","style","width","options","countries","onChange","events","value","handleSearch","code","getOptionLabel","option","name","autoHighlight","renderInput","params","TextField","label","variant","inputProps","autoComplete","BarGraph","countryChart","labels","datasets","backgroundColor","console","log","App","useState","setcovidData","setCountries","setShowData","useEffect","fetch","then","response","json","body","latest_data","class","countryName","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.337d8898.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from './Statbox.module.css';\r\n\r\nconst StatBox = (props) => {\r\n  return (\r\n    <div className = {classes.box}>\r\n    <h1>{props.category}</h1>\r\n    <h2>{props.displayData}</h2>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StatBox;\r\n","import React from \"react\";\r\nimport StatBox from './StatBox/StatBox';\r\nimport classes from './TotalStats.module.css'\r\n\r\nconst TotalStats = (props) => {\r\n  let data = props.showData ?   <div className = {classes.layoutColumn}>\r\n      <StatBox displayData = {props.covidData.confirmed.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} category = {\"Confirmed\"}/>\r\n      <StatBox displayData = {props.covidData.deaths.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} category = {\"Deaths\"}/>\r\n      <StatBox displayData = {props.covidData.critical.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} category = {\"Critical\"}/>\r\n      <StatBox displayData = {props.covidData.recovered.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} category = {\"Recovered\"}/>\r\n    </div> \r\n    : null\r\n  return (\r\n    <div>\r\n      {data}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TotalStats;\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport classes from './SearchBox.module.css';\r\n\r\nconst SearchBox = (props) => {\r\n  return (\r\n    <div className = {classes.search}>\r\n      <Autocomplete\r\n        id=\"country-select-demo\"\r\n        style={{ width: 600 }}\r\n        options={props.countries}\r\n        onChange={(events, value) => {\r\n          if(value !== null){\r\n            props.handleSearch(value.code)\r\n          }\r\n          else{\r\n            /*Some refresh to reset the graph*/\r\n          }\r\n        }}\r\n        /*Displays how the options will be shown*/\r\n        getOptionLabel={(option) => option.name}\r\n        autoHighlight\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            label=\"Choose a Country\"\r\n            variant=\"outlined\"\r\n            inputProps={{\r\n              ...params.inputProps,\r\n              autoComplete: \"new-password\", // disable autocomplete and autofill\r\n            }}\r\n          />\r\n        )}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport classes from './BarGraph.module.css';\r\n\r\nconst BarGraph = (props) => {\r\n  const countryChart = {\r\n    labels: [\"Confirmed\"],\r\n    datasets: [\r\n      {\r\n        label: \"Confirmed\",\r\n        data: [props.covidData.confirmed],\r\n        backgroundColor: \"#D3D3D3\"\r\n      },\r\n      {\r\n        label: \"Deaths\",\r\n        data: [props.covidData.deaths],\r\n        backgroundColor: \"#fc6978\"\r\n      },\r\n      {\r\n        label: \"Critical\",\r\n        data: [props.covidData.critical],\r\n        backgroundColor: \"#FFD700\"\r\n      },\r\n      {\r\n        label: \"Recovered\",\r\n        data: [props.covidData.recovered],\r\n        backgroundColor: \"#69fca4\"\r\n      },\r\n    ],\r\n  };\r\n  console.log(countryChart.datasets)\r\n  let data = props.showData ? <Bar data={countryChart} /> : null\r\n  return (\r\n    <div className = {classes.BarGraph}>\r\n      {data}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BarGraph;\r\n","import React, { useState, useEffect } from \"react\";\nimport TotalStats from './components/TotalStats/TotalStats';\nimport SearchBox from './components/SearchBox/SearchBox';\nimport BarGraph from './components/BarGraph/BarGraph';\nimport './App.css';\n\nfunction App() {\n  const [covidData, setcovidData] = useState({\n    name: \"\",\n    confirmed: 0,\n    deaths: 0,\n    critical: 0,\n    recovered: 0\n  });\n  const [countries, setCountries] = useState([]);\n  const [showData, setShowData] = useState(false);\n\n  /*Should only run on initial load*/\n  useEffect(()=>{\n    /*Default start in the U.S.*/\n    fetch(`https://corona-api.com/countries/US`)\n    .then((response) => {\n      return response.json();\n    })\n    .then((body) => {\n      setcovidData({\n        name: body.data.name,\n        confirmed: body.data.latest_data.confirmed,\n        deaths: body.data.latest_data.deaths,\n        critical: body.data.latest_data.critical,\n        recovered: body.data.latest_data.recovered\n      });\n    });\n    /*Get list of countries*/\n    fetch(`https://corona-api.com/countries`)\n    .then((response) => {\n      return response.json();\n    })\n    .then((body) => {\n      setCountries(body.data);\n    });\n    /*Give second argument as this should only run once*/\n  }, [])\n\n\n  let handleSearch = (countryName) => {\n    /*Show data but only run on initial change*/\n    if(!showData){\n      setShowData(true)\n    }\n    /*Set country name to what was searched*/\n    /*Get specific country data*/\n    fetch(`https://corona-api.com/countries/${countryName}`)\n    .then((response) => {\n      return response.json();\n    })\n    .then((body) => {\n      /*Reset data to different country statistics*/\n      setcovidData({\n        name: body.data.name,\n        confirmed: body.data.latest_data.confirmed,\n        deaths: body.data.latest_data.deaths,\n        critical: body.data.latest_data.critical,\n        recovered: body.data.latest_data.recovered\n      });\n    });\n  }\n\n  /*Change in plans -> show totalStats and graph only on search*/\n  return (\n    <div>\n        <div class = \"top\">\n          <h1 class = \"upper\">Covid Tracker</h1>\n          <SearchBox handleSearch = {handleSearch} countries = {countries} covidData = {covidData}/>\n        </div>\n        <div class = \"bottom\">\n          <TotalStats covidData = {covidData} showData = {showData}/>\n          <BarGraph covidData = {covidData} showData = {showData}/>\n        </div>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Statbox_box__64eJT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layoutColumn\":\"TotalStats_layoutColumn__3yg6J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"SearchBox_search__1eR4L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BarGraph\":\"BarGraph_BarGraph__2VJkb\"};"],"sourceRoot":""}